{"version":3,"sources":["./node_modules/ngx-freshchat/__ivy_ngcc__/fesm5/ngx-freshchat.js"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC0B;AACvC;AACc;;AAER;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,4DAAK,IAAI,8DAAO,iBAAiB,+BAA+B,EAAE;AACpF;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B,kEAAkE,2BAA2B,EAAE;AAC/F;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,+CAAU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,gDAAgD;AACjG;AACA,SAAS;AACT;AACA,gCAAgC,wEAAkB,EAAE,kDAAkD,kCAAkC,EAAE,kDAAkD;AAC5L,0BAA0B,wDAAU,GAAG,wDAAU;AACjD;AACA,oEAAoE,yCAAyC;AAC7G,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,wDAAU;AACxB;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;AAC5C;AACA,CAAC;;AAED;AACA;AACA;AACA,0BAA0B,8DAAuB,EAAE,2BAA2B;AAC9E,0BAA0B,8DAAuB,EAAE,kDAAkD,wCAAwC,EAAE,mDAAmD;AAClM,4BAA4B,CAAC,+DAAwB;AACrD,cAAc,sDAAQ;AACtB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,KAAK,gBAAgB,WAAW,EAAE,QAAQ,EAAE;AAC5C;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;;AAEmD;;AAEnD,yC","file":"common.js","sourcesContent":["import { __decorate, __metadata } from 'tslib';\nimport { ɵɵdefineInjectable, Injectable, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { first, flatMap } from 'rxjs/operators';\n\nimport * as ɵngcc0 from '@angular/core';\nvar NgxFreshChatService = /** @class */ (function () {\n    function NgxFreshChatService() {\n    }\n    /**\n     * Initializes the Freshchat Widget.\n     * @param data The Freshchat init object.\n     * @returns An Observable which emits when the widget has loaded.\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.init = function (data) {\n        var _this = this;\n        return this.loadScript('https://wchat.freshchat.com/js/widget.js')\n            .pipe(first(), flatMap(function (res) { return _this.initWidget(data); }));\n    };\n    NgxFreshChatService.prototype.initWidget = function (data) {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this.getWidget().on('widget:loaded', function (res) { return observer.next(res); });\n            _this.getWidget().init(data);\n        });\n    };\n    /**\n     * Used to capture the user creation event. This can be used to save the restoreID.\n     * @returns An Observable which emits when a user is created.\n     * @author Will Poulson\n     */\n    NgxFreshChatService.prototype.onUserCreate = function () {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this.getWidget().on('user:created', function (res) {\n                if (res.status !== 200) {\n                    observer.error(res.status);\n                }\n                else {\n                    observer.next(res.data || null);\n                }\n            });\n        });\n    };\n    /**\n     * Gets the current Freshchat user.\n     * @returns An Observable which emits the current user.\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.getUser = function () {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this.getWidget().user.get(function (res) {\n                if (res.status !== 200) {\n                    observer.error(res.status);\n                }\n                else {\n                    observer.next(res.data);\n                }\n            });\n        });\n    };\n    /**\n     * Sets the current Freshchat users properties\n     * @param user The new properties for the user.\n     * @returns An Observable which emits after the user has been updated.\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.setUserProperties = function (user) {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this.getWidget().user.setProperties(user, function (res) {\n                if (res.status !== 200) {\n                    observer.error(res.status);\n                }\n                else {\n                    observer.next(res.data || null);\n                }\n            });\n        });\n    };\n    /**\n     * Updates the current Freshchat user.\n     * @param user The new properties to update the user with.\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.updateUser = function (user) {\n        this.getWidget().user.update(user);\n    };\n    /**\n     * Clears the current Freshchat user.\n     * @returns An Observable which emits when the user has been cleared.\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.clearUser = function () {\n        var _this = this;\n        return new Observable(function (observer) {\n            _this.getWidget().user.clear(function (res) {\n                if (res.status !== 200) {\n                    observer.error(res.status);\n                }\n                else {\n                    observer.next(res.data || null);\n                }\n            });\n        });\n    };\n    /**\n     * Checks whether the Freshchat Widget is open.\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.isOpen = function () {\n        return this.getWidget().isOpen();\n    };\n    /**\n     * Opens the Freshchat Widget.\n     *\n     * @param payload Optional - parameters including channel id or name.\n     * The replyText parameter can be used to set up custom text in the text area of the widget.\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.open = function (payload) {\n        this.getWidget().open(payload);\n    };\n    /**\n     * Closes the Freshchat Widget.\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.close = function () {\n        this.getWidget().close();\n    };\n    /**\n     * Tracks an event against the current user.\n     * @param eventName The event name to track.\n     * @param payload Optional - The payload to pass to the event.\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.track = function (eventName, payload) {\n        this.getWidget().track(eventName, payload);\n    };\n    /**\n     * Sets the tags against the current user\n     * @param tags An array of tags to set.\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.setTags = function (tags) {\n        this.getWidget().setTags(tags);\n    };\n    /**\n     * Sets the locale for the current user\n     * @param locale The locale.\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.setLocale = function (locale) {\n        this.getWidget().setLocale(locale);\n    };\n    /**\n     * Destroys the current Freshchat widget.\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.destroy = function () {\n        this.getWidget().destroy();\n    };\n    /**\n     * Checks if the widget has been initialized\n     * @returns A boolean of if the widget has been initialized\n     * @author beyondsanity\n     */\n    NgxFreshChatService.prototype.isInitialized = function () {\n        return this.getWidget().isInitialized();\n    };\n    NgxFreshChatService.prototype.getWidget = function () {\n        return window.fcWidget;\n    };\n    NgxFreshChatService.prototype.loadScript = function (src) {\n        return new Observable(function (observer) {\n            var scriptElement = document.createElement('script');\n            scriptElement.type = 'text/javascript';\n            scriptElement.src = src;\n            scriptElement.onload = function () {\n                observer.next(src);\n                observer.complete();\n            };\n            scriptElement.onerror = function () { return observer.error('Couldn\\'t load ' + src); };\n            document.getElementsByTagName('body')[0].appendChild(scriptElement);\n        });\n    };\n    NgxFreshChatService.ɵprov = ɵɵdefineInjectable({ factory: function NgxFreshChatService_Factory() { return new NgxFreshChatService(); }, token: NgxFreshChatService, providedIn: \"root\" });\n    NgxFreshChatService = __decorate([ __metadata(\"design:paramtypes\", [])\n    ], NgxFreshChatService);\nNgxFreshChatService.ɵfac = function NgxFreshChatService_Factory(t) { return new (t || NgxFreshChatService)(); };\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxFreshChatService, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return []; }, null); })();\n    return NgxFreshChatService;\n}());\n\nvar NgxFreshChatModule = /** @class */ (function () {\n    function NgxFreshChatModule() {\n    }\nNgxFreshChatModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: NgxFreshChatModule });\nNgxFreshChatModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function NgxFreshChatModule_Factory(t) { return new (t || NgxFreshChatModule)(); }, providers: [NgxFreshChatService], imports: [[]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NgxFreshChatModule, [{\n        type: NgModule,\n        args: [{\n                imports: [],\n                providers: [NgxFreshChatService],\n                declarations: [],\n                exports: []\n            }]\n    }], function () { return []; }, null); })();\n    return NgxFreshChatModule;\n}());\n\n/*\n * Public API Surface of ngx-freshchat-lib\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxFreshChatModule, NgxFreshChatService };\n\n//# sourceMappingURL=ngx-freshchat.js.map"],"sourceRoot":"webpack:///"}